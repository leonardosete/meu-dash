services:
  backend:
    container_name: meu-dash-backend-dev
    image: meu-dash-backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    # Usa Gunicorn, um servidor WSGI de produção, que é multithread e mais robusto
    # que o servidor de desenvolvimento do Flask. Isso resolve problemas de concorrência
    # que podem causar a tela em branco no frontend. O '--reload' habilita o live-reloading.
    command: gunicorn --workers 4 --bind 0.0.0.0:5000 --reload "src.app:app" --chdir /app/backend
    ports:
      - "${BACKEND_PORT:-5001}:5000"
    volumes:
      # Monta o código-fonte e os templates para live-reloading.
      - ./backend:/app/backend # Monta o diretório do backend
      # Usa um volume nomeado para os dados, evitando problemas de permissão do host.
      - data-volume:/app/data
      # Monta o diretório de documentação para que possa ser servido.
      - ./docs:/app/docs
    environment:
      - FLASK_APP=src.app
      - FLASK_DEBUG=True
      # Garante que o Python encontre os módulos da aplicação.
      - PYTHONPATH=/app/backend
      # Informa ao backend a URL do frontend para gerar links corretos nos relatórios
      - FRONTEND_BASE_URL=http://127.0.0.1:${FRONTEND_PORT:-5174}
    env_file:
      - .env

  security-scanner:
    container_name: meu-dash-security-scanner
    image: meu-dash-security-scanner
    build:
      context: .
      dockerfile: backend/Dockerfile.bandit
    # Este serviço é apenas para execução de tarefas, não precisa de portas.
    # O comando será fornecido via 'docker-compose run'.
    volumes:
      # Monta o código-fonte para que o Bandit possa analisá-lo.
      - ./backend/src:/app/src

  frontend:
    container_name: meu-dash-frontend-dev
    image: meu-dash-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    # Garante que o contêiner rode com o mesmo usuário do host,
    # evitando problemas de permissão de escrita em volumes montados.
    # A variável de ambiente UID é lida do arquivo .env ou do sistema.
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /app
    ports:
      # Expõe a porta do Vite para acesso no navegador.
      - "${FRONTEND_PORT:-5174}:5173"
    volumes:
      # Monta o diretório local do frontend para dentro do contêiner,
      # permitindo o live-reloading de todos os arquivos (src, public, index.html).
      - ./frontend:/app
      # "Máscara" a pasta node_modules local, forçando o uso da pasta
      # que foi instalada durante o build da imagem. Isso evita conflitos e melhora a performance.
      - /app/node_modules
    # Inicia o servidor de desenvolvimento do Vite. O script 'dev' no package.json
    # já contém a flag '--host', portanto não a repetimos aqui.
    command: npm run dev

# Declara o volume nomeado para persistência dos dados do banco e relatórios.
volumes:
  data-volume:
