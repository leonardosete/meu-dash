# Workflow de CI/CD unificado: Testa, Constrói e Publica a imagem Docker.
name: CI - Build, Test, and Publish

on:
  # Dispara o workflow em pushes para as branches principais e de refatoração.
  push:
    branches:
      - main
  # Dispara o workflow em pull requests para a branch main.
  pull_request:
    branches:
      - main
  # Permite a execução manual do workflow a partir da aba "Actions" do GitHub.
  workflow_dispatch:

jobs:
  build-test-publish:
    name: Build, Test, and Publish
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código: Baixa o código do repositório para o runner.
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # Pinned to a specific commit

      # 2. Configuração do Python: Prepara o ambiente Python.
      - name: Set up Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c # Pinned to a specific commit
        with:
          python-version: '3.14'

      # 3. Cache de dependências Pip: Armazena as dependências baixadas para reutilização.
      - name: Cache pip dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: ~/.cache/pip
          # A chave de cache muda se o requirements.txt for alterado.
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 3. Instalação de Dependências: Instala as bibliotecas listadas no requirements.txt.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # 4. Execução dos Testes: Roda a suíte de testes com pytest.
      # Se este passo falhar, o workflow para aqui.
      - name: Run tests
        run: pytest

      # 5. Check Code Quality & Formatting
      - name: Check formatting with ruff format
        run: ruff format --check backend

      - name: Lint with Ruff
        run: ruff check backend

      # 6. Run Security Scan with Bandit
      - name: Run security scan
        run: bandit -r backend/src -ll -ii

      # 5. Login no Docker Hub: Só executa em pushes para a branch 'main'.
      - name: Log in to Docker Hub
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # Pinned to a specific commit
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Build e Push da Imagem: Só executa em pushes para a 'main'.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # SHA do v2

      - name: Build and push Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # SHA do v5
        with:
          platforms: linux/amd64
          context: ./backend # O contexto do build agora é a pasta backend
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/meu-dash-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/meu-dash-web:${{ github.sha }}
