# Makefile para automa√ß√£o de tarefas comuns no projeto meu-dash

# Define o interpretador Python a ser usado. Procura por um ambiente virtual.
PYTHON := $(shell if [ -d ".venv" ]; then echo ".venv/bin/python"; else echo "python3"; fi)

# Define o nome da imagem Docker de desenvolvimento e a tag.
DOCKER_IMAGE_NAME := meu-dash
DOCKER_IMAGE_TAG := latest
DOCKER_PROD_IMAGE_NAME := sevenleo/smart-plan

.PHONY: help install setup setup-frontend run test test-backend-docker format lint check clean distclean docker-build docker-run docker-prune validate validate-all-docker validate-clean-docker up down migrate-docker lint-backend-docker format-backend-docker check-backend-docker lint-frontend-docker format-frontend-docker test-frontend-docker format-all-docker publish-prod
help:
	@echo "Comandos dispon√≠veis:"
	@echo ""
	@echo "--- üê≥ Ambiente de Desenvolvimento (Docker - RECOMENDADO) ---"
	@echo "  make up             - (Recomendado) Inicia todo o ambiente de desenvolvimento com Docker Compose."
	@echo "  make down           - Para todo o ambiente Docker Compose."
	@echo "  make migrate-docker - (Importante) Aplica as migra√ß√µes do DB dentro do cont√™iner Docker."
	@echo ""
	@echo "--- üöÄ Ambiente de Produ√ß√£o (Docker + K8s) ---"
	@echo "  make publish-prod   - Constr√≥i e publica a imagem de produ√ß√£o para o Docker Hub."
	@echo ""
	@echo "--- ‚úÖ Valida√ß√£o e Testes (Docker) ---"
	@echo "  make validate-all-docker - (RECOMENDADO) Roda TODAS as valida√ß√µes (backend + frontend) no Docker."
	@echo "  make validate-clean-docker - Roda TODAS as valida√ß√µes a partir de um build limpo, sem cache."
	@echo "  make test-backend-docker   - Executa os testes do backend (pytest) no Docker."
	@echo "  make check-backend-docker  - Roda format, lint e security scan do backend no Docker."
	@echo "  make test-frontend-docker  - Executa os testes do frontend (vitest) no Docker."
	@echo "  make format-all-docker   - Formata o c√≥digo do backend e do frontend no Docker."
	@echo "  make format-backend-docker - Formata o c√≥digo do backend com ruff no Docker."
	@echo "  make lint-frontend-docker  - Roda o linter (eslint) do frontend no Docker."
	@echo "  make format-frontend-docker- Formata o c√≥digo do frontend com Prettier no Docker."
	@echo ""
	@echo "--- üßπ Limpeza ---"
	@echo "  make clean          - Remove arquivos tempor√°rios e caches."
	@echo "  make distclean      - Remove TODOS os arquivos gerados (venv, db, relat√≥rios, node_modules)."
	@echo "  make docker-prune   - Remove imagens Docker n√£o utilizadas (dangling images)."
	@echo ""
	@echo "--- üìú Comandos Legados / Locais (N√ÉO RECOMENDADOS) ---"
	@echo "  make install        - (Legado) Instala as depend√™ncias do requirements.txt localmente."
	@echo "  make setup          - (Legado) Cria o ambiente virtual e instala as depend√™ncias do backend."
	@echo "  make setup-and-run  - (Legado) Configura o ambiente local do zero e inicia a aplica√ß√£o."
	@echo "  make run            - (Legado) Inicia a aplica√ß√£o Flask localmente."
	@echo "  make fresh-run      - (Legado) Limpa o DB, aplica migra√ß√µes e inicia a aplica√ß√£o localmente."
	@echo "  make migrate        - (Legado) Aplica as migra√ß√µes do banco de dados localmente."
	@echo "  make format         - Formata o c√≥digo com 'ruff format'."
	@echo "  make lint           - Executa o linter 'ruff check --fix' para corrigir erros."
	@echo "  make security-scan  - Roda a verifica√ß√£o de seguran√ßa com 'bandit'."
	@echo "  make check          - Roda todas as verifica√ß√µes: formata√ß√£o, linting e seguran√ßa (para CI)."
	@echo "  make validate       - (TUDO-EM-UM) Instala depend√™ncias, formata e testa o projeto."
	@echo "  make docker-build   - Constr√≥i a imagem Docker da aplica√ß√£o."
	@echo "  make docker-run     - Executa a aplica√ß√£o a partir da imagem Docker."

# Cria o ambiente virtual e instala as depend√™ncias nele.
setup:
	@echo ">>> Configurando ambiente virtual em .venv..."
	@python3 -m venv .venv
	@echo ">>> Atualizando pip e instalando depend√™ncias no ambiente virtual..."
	@.venv/bin/pip install --upgrade pip -r backend/requirements.txt

install:
	@echo ">>> Instalando depend√™ncias de requirements.txt..."
	@$(PYTHON) -m pip install -r backend/requirements.txt

setup-and-run:
	@echo ">>> [FAZ-TUDO] Iniciando configura√ß√£o completa do ambiente..."
	@$(MAKE) setup
	@$(MAKE) migrate
	@$(MAKE) run

run:
	@echo ">>> Iniciando a aplica√ß√£o em modo de desenvolvimento..."
	@export PYTHONPATH=$(shell pwd)/backend && \
	export FLASK_APP=src.app && \
	export FLASK_DEBUG=True && \
	.venv/bin/flask run --port=${BACKEND_PORT:-5000}

fresh-run:
	# Garante que o ambiente virtual exista antes de continuar.
	@if [ ! -d ".venv" ]; then \
		$(MAKE) setup; \
	fi
	@echo ">>> [FRESH RUN] Removendo banco de dados antigo..."
	@rm -f data/meu_dash.db
	@$(MAKE) migrate
	@$(MAKE) run

test:
	@echo ">>> Executando testes com pytest..."
	@export PYTHONPATH=$(shell pwd)/backend && \
	.venv/bin/pytest

migrate-docker:
	@echo ">>> Gerenciando migra√ß√µes do banco de dados dentro do cont√™iner Docker..."
	@echo ">>> A cria√ß√£o inicial do DB agora √© autom√°tica. Este comando √© para futuras altera√ß√µes de esquema."
	@docker-compose exec -T backend sh -c "flask db init --directory backend/migrations || true"
	@docker-compose exec -T backend flask db migrate -m "Autodetect database changes" --directory backend/migrations
	@docker-compose exec -T backend flask db upgrade --directory backend/migrations

# Aplica as migra√ß√µes do banco de dados.
# Garante que o ambiente de migra√ß√µes esteja configurado e que a migra√ß√£o inicial seja criada, se necess√°rio.
migrate:
	@echo ">>> Aplicando migra√ß√µes do banco de dados..."
	@if [ ! -d "backend/migrations" ]; then \
		echo ">>> Diret√≥rio 'migrations' n√£o encontrado. Executando 'flask db init'..."; \
		export PYTHONPATH=$(shell pwd)/backend && export FLASK_APP=src.app && .venv/bin/flask db init; \
	fi
	# Verifica se h√° scripts de migra√ß√£o. Se n√£o houver, cria a migra√ß√£o inicial.
	@if [ -z "$$(ls -A backend/migrations/versions 2>/dev/null)" ]; then \
		echo ">>> Nenhuma migra√ß√£o inicial encontrada. Criando migra√ß√£o inicial..."; \
		export PYTHONPATH=$(shell pwd)/backend && export FLASK_APP=src.app && .venv/bin/flask db migrate -m "Initial migration"; \
	fi
	@echo ">>> Aplicando migra√ß√µes ao banco de dados (flask db upgrade)..."
	@export PYTHONPATH=$(shell pwd)/backend && export FLASK_APP=src.app && .venv/bin/flask db upgrade

format:
	@echo ">>> Formatando o c√≥digo com ruff..."
	@.venv/bin/ruff format .

lint:
	@echo ">>> Executando linter com ruff (com auto-corre√ß√£o)..."
	@.venv/bin/ruff check --fix .

security-scan:
	@echo ">>> Verificando vulnerabilidades de seguran√ßa com bandit..."
	@.venv/bin/bandit -r backend/src -ll -ii

# --- Comandos de Valida√ß√£o e Testes no Docker ---

lint-backend-docker:
	@echo ">>> [DOCKER] Executando linter com ruff (com auto-corre√ß√£o)..."
	@docker-compose exec -T backend ruff check --fix .

format-backend-docker:
	@echo ">>> [DOCKER] Formatando o c√≥digo do backend com ruff..."
	@docker-compose exec -T backend ruff format .

check-backend-docker:
	@echo ">>> [DOCKER] Verificando formata√ß√£o e linting do backend com ruff..."
	@docker-compose exec -T backend ruff format --check .
	@docker-compose exec -T backend ruff check .
	@echo ">>> [DOCKER] Verificando seguran√ßa do backend com bandit..."
	@docker-compose run --rm security-scanner bandit -r src -ll -ii

test-backend-docker:
	@echo ">>> [DOCKER] Executando testes do backend com pytest..."
	@docker-compose exec -T backend pytest

lint-frontend-docker:
	@echo ">>> [DOCKER] Executando linter do frontend com ESLint..."
	@docker-compose exec -T frontend npm run lint

format-frontend-docker:
	@echo ">>> [DOCKER] Formatando o c√≥digo do frontend com Prettier..."
	@docker-compose exec -T frontend npm run format

test-frontend-docker:
	@echo ">>> [DOCKER] Executando testes do frontend..."
	@docker-compose exec -T frontend npm run test

format-all-docker:
	@echo ">>> [DOCKER] Formatando todo o c√≥digo (Backend + Frontend)..."
	@$(MAKE) format-backend-docker
	@$(MAKE) format-frontend-docker

validate-clean-docker:
	@echo ">>> [DOCKER] Executando valida√ß√£o completa a partir de um build limpo (sem cache)..."
	@echo ">>> Passo 1: Destruindo ambiente Docker existente (incluindo volumes)..."
	@docker-compose down --volumes --remove-orphans
	@echo ">>> Passo 2: For√ßando a reconstru√ß√£o de todas as imagens sem cache..."
	@docker-compose build --no-cache
	@$(MAKE) validate-all-docker

validate-all-docker:
	@echo ">>> [DOCKER] Executando valida√ß√£o completa (Backend + Frontend)..."
	@echo ">>> Garantindo que todos os servi√ßos est√£o em execu√ß√£o..."
	@$(MAKE) up
	@$(MAKE) check-backend-docker && $(MAKE) test-backend-docker && $(MAKE) lint-frontend-docker && $(MAKE) test-frontend-docker

check:
	@echo ">>> Verificando formata√ß√£o com ruff..."
	@.venv/bin/ruff format --check backend
	@echo ">>> Verificando c√≥digo com ruff check..."
	@.venv/bin/ruff check backend
	@$(MAKE) security-scan

validate:
	@echo ">>> Executando valida√ß√£o completa: instalando depend√™ncias, formatando e testando..."
	@$(MAKE) install
	@$(MAKE) format
	@$(MAKE) test
	@echo ">>> Valida√ß√£o completa conclu√≠da com sucesso."

clean:
	@echo ">>> Removendo caches e arquivos tempor√°rios..."
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} +
	@rm -f .coverage

distclean: clean
	@echo ">>> [DEEP CLEAN] Removendo ambiente virtual, banco de dados, migra√ß√µes e relat√≥rios..."
	# A forma correta de remover volumes gerenciados pelo Docker (como node_modules) √© com 'down --volumes'.
	# Isso resolve o problema de permiss√£o sem precisar de 'sudo'.
	@echo ">>> Parando cont√™ineres e removendo volumes gerenciados pelo Docker (incluindo node_modules)..."
	@docker-compose down --volumes --remove-orphans
	# Remove o diret√≥rio de dados local, caso exista de execu√ß√µes antigas.
	@echo ">>> Limpando diret√≥rio de dados local legado..."
	@rm -rf data
	@rm -rf .venv
	@rm -rf backend/migrations
	@echo ">>> Limpeza completa conclu√≠da."

docker-build:
	@echo ">>> Construindo imagem Docker: $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)..."
	@docker build -f backend/Dockerfile -t $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG) ./backend

docker-run:
	@echo ">>> Executando container Docker..."
	@docker run -p 5000:5000 -v $(shell pwd)/data:/app/data $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)

up:
	@echo ">>> Iniciando ambiente de desenvolvimento com Docker Compose..."
	@docker-compose up --build -d
	@echo ">>> Ambiente iniciado. Backend e Frontend est√£o em execu√ß√£o."

down:
	@echo ">>> Parando ambiente de desenvolvimento Docker Compose..."
	@docker-compose down --remove-orphans

docker-prune:
	@echo ">>> Removendo imagens Docker n√£o utilizadas..."
	@docker image prune -f

publish-prod:
	@echo ">>> Construindo e publicando a imagem de produ√ß√£o multi-plataforma: $(DOCKER_PROD_IMAGE_NAME):$(DOCKER_IMAGE_TAG)..."
	@echo ">>> Construindo para linux/amd64 (cluster) e linux/arm64 (local)..."
	@docker buildx build --platform linux/amd64,linux/arm64 -t $(DOCKER_PROD_IMAGE_NAME):$(DOCKER_IMAGE_TAG) -f Dockerfile . --push
	@echo ">>> Imagem publicada com sucesso!"
