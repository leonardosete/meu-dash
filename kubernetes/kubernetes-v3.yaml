---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: smart-remedy-sa
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app-controller
automountServiceAccountToken: false

---
apiVersion: v1
kind: Service
metadata:
  name: smart-remedy-headless
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app
  ports:
  - port: 80
    targetPort: http

---
apiVersion: v1
kind: Service
metadata:
  name: smart-remedy
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app
  ports:
  - name: http
    port: 80
    targetPort: http

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: smart-remedy-pdb
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-remedy
      app.kubernetes.io/component: app

---
# --- PostgreSQL Resources ---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: smart-remedy 
    app.kubernetes.io/component: database
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: database
spec:
  clusterIP: None 
  selector:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: database
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: database
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-remedy
      app.kubernetes.io/component: database

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: database
spec:
  replicas: 1
  serviceName: "postgres-headless"
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-remedy
      app.kubernetes.io/component: database
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smart-remedy
        app.kubernetes.io/component: database
    spec:
      automountServiceAccountToken: false
      
      # --- MELHORIA DE SEGURANÇA: NÍVEL POD ---
      # A imagem oficial do Postgres roda com UID/GID 70.
      # fsGroup: 70 garante que o volume /var/lib/postgresql/data seja gravável pelo grupo 'postgres'.
      # CORREÇÃO: runAsNonRoot é removido para permitir que o initContainer 'volume-mount-hack' rode como root.
      # A segurança é mantida pois o contêiner principal do postgres ainda é forçado a rodar como não-root.
      securityContext:
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70
      # --- FIM DA MELHORIA ---

      # CORREÇÃO: Adiciona um initContainer para preparar as permissões do volume.
      # Isso evita que o script de inicialização do Postgres tente fazer um 'chmod' e falhe.
      initContainers:
      - name: volume-mount-hack
        image: busybox:1.36
        command: ["sh", "-c", "chmod 700 /var/lib/postgresql/data"]
        securityContext:
          runAsUser: 0 # Este initContainer precisa rodar como root para fazer o chmod.
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data

      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          
          # --- MELHORIA DE SEGURANÇA: NÍVEL CONTÊINER ---
          securityContext:
            allowPrivilegeEscalation: false
          # --- FIM DA MELHORIA ---

          ports:
            - containerPort: 5432
              name: postgresdb
          envFrom:
            - secretRef:
                name: smart-remedy-secrets
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "$(POSTGRES_USER)", "-d", "$(POSTGRES_DB)"]
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "$(POSTGRES_USER)", "-d", "$(POSTGRES_DB)"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 2
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "500m"
              memory: "1Gi"
              ephemeral-storage: "2Gi"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
  
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app.kubernetes.io/name: smart-remedy
        app.kubernetes.io/component: database
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
# --- StatefulSet: Orquestração dos Pods da aplicação ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: smart-remedy
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app
spec:
  serviceName: "smart-remedy-headless"
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-remedy
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smart-remedy
        app.kubernetes.io: "true"
        app.kubernetes.io/component: app
    spec:
      serviceAccountName: smart-remedy-sa
      automountServiceAccountToken: false

      # --- MELHORIA DE SEGURANÇA: NÍVEL POD ---
      # runAsNonRoot: true Garante que a sua imagem (com USER appuser) seja permitida.
      # fsGroup: 1001 (Exemplo) Deve corresponder ao GID do 'appgroup' que você criou no Dockerfile.
      # Isso garante que o volume /app/data seja gravável por esse grupo.
      # CORREÇÃO: Adiciona runAsUser e runAsGroup para resolver o erro de validação.
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1001
        fsGroup: 1001
      # --- FIM DA MELHORIA ---

      volumes:
      - name: frontend-dist
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: smart-remedy-nginx-conf

      initContainers:
      # 1. DB Migrator
      - name: db-migrator
        # CORREÇÃO DE QUALIDADE: Tag imutável e IfNotPresent
        image: sevenleo/smart-remedy:latest
        imagePullPolicy: Always
        command: ["flask", "db", "upgrade"]
        env:
        - name: FLASK_APP
          value: "src.app:create_app()"
        - name: POSTGRES_HOST
          value: "postgres-service"
        envFrom:
        - secretRef:
            name: smart-remedy-secrets
        volumeMounts:
        - name: smart-remedy-data
          mountPath: /app/data
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
            ephemeral-storage: "512Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
            ephemeral-storage: "1Gi"
        # --- MELHORIA DE SEGURANÇA: NÍVEL CONTÊINER ---
        securityContext:
          allowPrivilegeEscalation: false
          # Este initContainer também roda como 'appuser',
          # O fsGroup do Pod acima dará a ele permissão de escrita.
        # --- FIM DA MELHORIA ---
          
      # 2. Frontend Copier
      - name: frontend-copier
        # CORREÇÃO DE QUALIDADE: Tag imutável e IfNotPresent
        image: sevenleo/smart-remedy:latest
        imagePullPolicy: Always
        command: ["/bin/sh", "-c", "cp -r /app/frontend-dist/* /frontend-dist/"]
        volumeMounts:
        - name: frontend-dist
          mountPath: /frontend-dist
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
            ephemeral-storage: "256Mi"
          limits:
            cpu: "100m"
            memory: "256Mi"
            ephemeral-storage: "512Mi"
        # --- MELHORIA DE SEGURANÇA: NÍVEL CONTÊINER ---
        securityContext:
          allowPrivilegeEscalation: false
        # --- FIM DA MELHORIA ---

      containers:
      # --- Contêiner da API (Gunicorn/Flask) ---
      - name: smart-remedy-api
        # CORREÇÃO DE QUALIDADE: Tag imutável e IfNotPresent
        image: sevenleo/smart-remedy:latest
        imagePullPolicy: Always
        
        # --- MELHORIA DE SEGURANÇA: NÍVEL CONTÊINER ---
        securityContext:
          allowPrivilegeEscalation: false
        # --- FIM DA MELHORIA ---
          
        envFrom:
        - secretRef:
            name: smart-remedy-secrets
        env:
        - name: FLASK_APP
          value: "src.app:create_app()"
        - name: FRONTEND_BASE_URL
          value: "https.smart-remedy.devops-master.shop"
        - name: JWT_EXPIRATION_HOURS
          value: "1"
        - name: POSTGRES_HOST
          value: "postgres-service"
        ports:
        - name: gunicorn
          containerPort: 5000
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          # CORREÇÃO: Aumenta o tempo inicial para dar à aplicação tempo de iniciar.
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          # CORREÇÃO: Aumenta o tempo inicial para dar à aplicação tempo de iniciar.
          initialDelaySeconds: 60
          periodSeconds: 15
          failureThreshold: 3
        resources:
          requests:
            cpu: "256m"
            memory: "512Mi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "512m"
            memory: "1Gi"
            ephemeral-storage: "2Gi"
        volumeMounts:
        - name: smart-remedy-data
          mountPath: /app/data

      # --- Contêiner Sidecar do Nginx ---
      - name: smart-remedy-nginx
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        
        # --- MELHORIA DE SEGURANÇA: NÍVEL CONTÊINER ---
        # A imagem Nginx já roda como usuário não-root 'nginx'
        securityContext:
          allowPrivilegeEscalation: false
        # --- FIM DA MELHORIA ---
          
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: frontend-dist
          mountPath: /var/www/html
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 15
          periodSeconds: 20
        resources:
          requests:
            cpu: "128m"
            memory: "128Mi"
            ephemeral-storage: "512Mi"
          limits:
            cpu: "256m"
            memory: "256Mi"
            ephemeral-storage: "1Gi"

  # Template para criar o PVC da aplicação
  volumeClaimTemplates:
  - metadata:
      name: smart-remedy-data
      labels:
        app.kubernetes.io/name: smart-remedy
        app.kubernetes.io/component: app
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 2Gi

---
# --- ConfigMap para a configuração do Nginx ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: smart-remedy-nginx-conf
  namespace: smart-remedy
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: app-config
data:
  nginx.conf: |
    # (Conteúdo do ConfigMap... sem alterações)
    user nginx;
    worker_processes auto;
    events {
        worker_connections 1024;
    }
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        access_log /dev/stdout;
        error_log /dev/stderr;
        sendfile on;
        keepalive_timeout 65;
        server {
            listen 80;
            location ~ ^/(api|admin|apidocs|flasgger_static|reports|docs)/ {
                proxy_pass http://127.0.0.1:5000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            location / {
                root /var/www/html;
                try_files $uri $uri/ /index.html;
            }
        }
    }

---
# --- Ingress: Expõe o serviço para o mundo externo ---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: smart-remedy-ingress
  namespace: smart-remedy
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
  labels:
    app.kubernetes.io/name: smart-remedy
    app.kubernetes.io/component: ingress
spec:
  ingressClassName: nginx
  rules:
  - host: smart-remedy.devops-master.shop
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smart-remedy
            port:
              number: 80