---
# --- ServiceAccount: Define uma identidade dedicada e com privilégios mínimos para a aplicação ---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: smart-remedy-sa
  namespace: smart-remedy
automountServiceAccountToken: false

---
# --- Headless Service: Necessário para o StatefulSet ---
apiVersion: v1
kind: Service
metadata:
  name: smart-remedy-headless
  namespace: smart-remedy
spec:
  clusterIP: None
  selector:
    app: smart-remedy
  ports:
  - port: 80
    targetPort: http

---
# --- Service ClusterIP: Ponto de acesso interno para o Ingress ---
apiVersion: v1
kind: Service
metadata:
  name: smart-remedy
  namespace: smart-remedy
spec:
  type: ClusterIP
  selector:
    app: smart-remedy
  ports:
  - name: http
    port: 80
    targetPort: http

---
# --- PodDisruptionBudget (PDB): Garante a alta disponibilidade ---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: smart-remedy-pdb
  namespace: smart-remedy
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: smart-remedy

---
# --- PostgreSQL Resources ---

# PVC para persistir os dados do PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: smart-remedy
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Service para expor o PostgreSQL dentro do cluster
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: smart-remedy
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
# Deployment para o contêiner do PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: smart-remedy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: smart-remedy-secrets # Usa o Secret unificado
          # CORREÇÃO: Adiciona requests e limits de recursos para o PostgreSQL.
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "500m"
              memory: "1Gi"
              ephemeral-storage: "2Gi"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# --- StatefulSet: Orquestração dos Pods da aplicação ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: smart-remedy
  namespace: smart-remedy
spec:
  serviceName: "smart-remedy-headless"
  replicas: 1
  selector:
    matchLabels:
      app: smart-remedy
  template:
    metadata:
      labels:
        app: smart-remedy
    spec:
      serviceAccountName: smart-remedy-sa
      automountServiceAccountToken: false

      # --- Volumes definidos para o Pod ---
      volumes:
      - name: frontend-dist
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: smart-remedy-nginx-conf

      # --- Init Containers (em uma única lista) ---
      initContainers:
      # 1. DB Migrator: Prepara o banco de dados.
      - name: db-migrator
        image: sevenleo/smart-remedy:latest
        imagePullPolicy: Always
        command: ["flask", "db", "upgrade"]
        env:
        - name: FLASK_APP
          value: "src.app:create_app()"
        # O initContainer precisa das credenciais do DB para rodar a migração.
        - name: POSTGRES_HOST
          value: "postgres-service" # Nome do Service do PostgreSQL
        envFrom:
        - secretRef:
            name: smart-remedy-secrets # Usa o Secret unificado
        volumeMounts:
        - name: smart-remedy-data
          mountPath: /app/data
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
            ephemeral-storage: "512Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
            ephemeral-storage: "1Gi"
      # 2. Frontend Copier: Copia os arquivos do frontend da imagem para o volume compartilhado.
      - name: frontend-copier
        image: sevenleo/smart-remedy:latest
        imagePullPolicy: Always
        command: ["/bin/sh", "-c", "cp -r /app/frontend-dist/* /frontend-dist/"]
        volumeMounts:
        - name: frontend-dist
          mountPath: /frontend-dist
        # CORREÇÃO: Adiciona requests e limits para o initContainer.
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi" # CORREÇÃO: Typo '256i' para '64Mi', valor mais apropriado.
            ephemeral-storage: "256Mi"
          limits:
            cpu: "100m"
            memory: "256Mi"
            ephemeral-storage: "512Mi"

      # --- Contêineres Principais ---
      containers:
      # --- Contêiner da API (Gunicorn/Flask) ---
      - name: smart-remedy-api
        image: sevenleo/smart-remedy:latest
        imagePullPolicy: Always
        # Injeta todas as credenciais a partir do Secret unificado.
        envFrom:
        - secretRef:
            name: smart-remedy-secrets
        env:
        - name: FLASK_APP
          value: "src.app:create_app()"
        - name: FRONTEND_BASE_URL
          value: "https://smart-remedy.devops-master.shop"
        - name: JWT_EXPIRATION_HOURS
          value: "1"
        - name: POSTGRES_HOST
          value: "postgres-service" # Conecta ao Service do PostgreSQL
        ports:
        - name: gunicorn
          containerPort: 5000
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
          requests:
            cpu: "256m"
            memory: "512Mi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "512m"
            memory: "1Gi"
            ephemeral-storage: "2Gi"
        volumeMounts:
        - name: smart-remedy-data
          mountPath: /app/data

      # --- Contêiner Sidecar do Nginx ---
      - name: smart-remedy-nginx
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: frontend-dist
          mountPath: /var/www/html
        readinessProbe:
          httpGet:
            path: /
            port: http
        livenessProbe:
          httpGet:
            path: /
            port: http
        resources:
          requests:
            cpu: "128m"
            memory: "128Mi"
            ephemeral-storage: "512Mi"
          limits:
            cpu: "256m"
            memory: "256Mi"
            ephemeral-storage: "1Gi"

  volumeClaimTemplates:
  - metadata:
      name: smart-remedy-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 2Gi

---
# --- ConfigMap para a configuração do Nginx ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: smart-remedy-nginx-conf
  namespace: smart-remedy
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    events {
        worker_connections 1024;
    }
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        access_log /dev/stdout;
        error_log /dev/stderr;
        sendfile on;
        keepalive_timeout 65;
        server {
            listen 80;
            # CORREÇÃO: A regra de proxy foi ajustada. O caminho incorreto '/static' foi removido.
            # Agora, apenas os caminhos que realmente devem ir para o backend são encaminhados.
            location ~ ^/(api|admin|apidocs|flasgger_static|reports|docs)/ {
                proxy_pass http://127.0.0.1:5000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            location / {
                root /var/www/html;
                try_files $uri $uri/ /index.html;
            }
        }
    }

---
# --- Ingress: Expõe o serviço para o mundo externo ---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: smart-remedy-ingress
  namespace: smart-remedy
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: smart-remedy.devops-master.shop
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smart-remedy
            port:
              number: 80