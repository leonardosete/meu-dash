# /etc/nginx/nginx.conf

# Define o usuário com o qual o Nginx irá rodar. 'nginx' é o padrão no Alpine.
user nginx;
# O número de processos de trabalho. 'auto' geralmente define um por núcleo de CPU.
worker_processes auto;

# Bloco de eventos para configurar o comportamento de processamento de conexões.
events {
    worker_connections 1024; # Número máximo de conexões simultâneas por worker.
}

# Bloco HTTP para configurar o servidor web.
http {
    # Define os tipos de arquivo (MIME types) que o Nginx reconhecerá.
    include /etc/nginx/mime.types;
    # Define o tipo padrão se a extensão do arquivo não for reconhecida.
    default_type application/octet-stream;

    # Configurações de log.
    # O log de acesso é enviado para a saída padrão para ser capturado pelo Docker/Kubernetes.
    access_log /dev/stdout;
    # O log de erro também é enviado para a saída padrão.
    error_log /dev/stderr;

    # Configurações de otimização de performance.
    sendfile on;
    keepalive_timeout 65;

    # Define um servidor virtual para escutar na porta 80.
    server {
        listen 80;

        # --- Rota para a API do Backend ---
        # Todas as requisições que começam com /api/, /admin/, /apidocs/, etc.
        # serão encaminhadas para o contêiner da API (Gunicorn).
        location ~ ^/(api|admin|apidocs|flasgger_static|reports|docs|static)/ {
            # 'proxy_pass' aponta para o serviço Gunicorn.
            # Como eles estão no mesmo Pod, podemos usar 'localhost' e a porta do Gunicorn.
            proxy_pass http://127.0.0.1:5000;
            
            # Cabeçalhos importantes para passar a informação original do cliente para a aplicação Flask.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Rota para o Frontend (Single-Page Application) ---
        # Esta é a rota principal que serve os arquivos estáticos do React.
        location / {
            # Define o diretório raiz onde os arquivos do frontend estão localizados.
            # Este caminho corresponde ao volume 'frontend-dist' montado no contêiner do Nginx.
            root /var/www/html; # O manifesto monta o volume em /var/www/html
            # Tenta servir o arquivo solicitado diretamente.
            # Se não encontrar, tenta servir um diretório.
            # Se falhar, redireciona para /index.html, permitindo que o React Router assuma o controle.
            try_files $uri $uri/ /index.html;
        }
    }
}