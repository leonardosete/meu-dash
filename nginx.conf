# nginx.conf - Exemplo Completo para SPA com HTTPS e Proxy para Backend
#
# Este arquivo configura o Nginx para servir arquivos estáticos do frontend (React/Vite),
# redireciona todo tráfego HTTP para HTTPS (evita mixed content),
# e faz proxy para backend (Flask/Gunicorn) nas rotas específicas.
# Usa certificados automáticos (Let's Encrypt ou fornecidos pelo Cloudflare).

events {
    worker_connections 1024; # Número padrão de conexões por worker.
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Rate limiting para API
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    access_log /dev/stdout;

    # Bloco para porta 80 (HTTP) - REDIRECIONA tudo para HTTPS
    server {
        listen 80;
        server_name devops-master.shop smart-remedy.devops-master.shop;

        # Redireciona tudo para HTTPS
        return 301 https://$host$request_uri;
    }

    # Bloco para porta 443 (HTTPS) - serve files + proxy
    server {
        listen 443 ssl http2;
        server_name devops-master.shop smart-remedy.devops-master.shop;

        # ==== SSL settings (use os paths do cert/chain fornecidos pelo Let's Encrypt ou Cloudflare) ====
        ssl_certificate     /etc/letsencrypt/live/devops-master.shop/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/devops-master.shop/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # Add HSTS header (opcional, aumenta segurança)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Diretório raiz para o frontend (React/Vite build)
        root /var/www/html;
        index index.html;

        # SPA: serve arquivos estáticos e faz fallback para index.html
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy para o backend nas rotas específicas
        location ~ ^/(api|admin|reports|docs|apidocs|flasgger_static|swagger\.json|apispec_1\.json) {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Tratamento de erros
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
