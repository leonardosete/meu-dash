# nginx.conf

# Define o usuário que o Nginx usará. 'nginx' é comum em imagens oficiais.
user nginx;
# O número de processos de trabalho. 'auto' é uma boa prática.
worker_processes auto;

# Define o arquivo de log de erros e o arquivo de PID.
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    # O número máximo de conexões simultâneas por processo de trabalho.
    worker_connections 1024;
}

http {
    # Inclui os tipos MIME padrão para que o Nginx sirva os arquivos com o Content-Type correto.
    include /etc/nginx/mime.types;
    # Define o tipo padrão se o tipo de arquivo não for encontrado.
    default_type application/octet-stream;

    # Configurações de log de acesso.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Otimizações de desempenho.
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Configuração do servidor principal que escuta na porta 80.
    server {
        listen 80;
        server_name localhost;

        # Define a raiz onde os arquivos estáticos do frontend estão localizados.
        # O Dockerfile de produção deve copiar o build do React para /usr/share/nginx/html.
        root /usr/share/nginx/html;
        index index.html;

        # --- REGRAS DE PROXY PARA O BACKEND ---
        # Todas essas localizações fazem proxy para o Gunicorn que roda na porta 5000.

        location /api {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /admin {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /apidocs {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- A REGRA QUE FALTA ---
        # Esta regra é crucial para que o Swagger UI funcione.
        location /flasgger_static {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /reports {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /docs {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- REGRA DE FALLBACK PARA A SPA ---
        # Se nenhuma das localizações acima corresponder, serve o index.html.
        # Isso é essencial para que o roteamento do lado do cliente (React Router) funcione.
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}