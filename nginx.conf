# /etc/nginx/nginx.conf

user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable "msie6";

    # Define o backend da API que está rodando na mesma Pod (localhost)
    upstream backend_api {
        server 127.0.0.1:5000;
    }

    server {
        listen 80;
        server_name _;

        # Raiz dos arquivos estáticos do frontend (React build)
        root /var/www/html;
        index index.html;

        # Rota para a raiz e qualquer outra rota não especificada (fallback para a SPA)
        location / {
            try_files $uri $uri/ /index.html;
        }

        # --- REGRAS DE PROXY PARA O BACKEND ---
        # Encaminha todas as rotas relevantes para a API Flask/Gunicorn
        location ~ ^/(api|admin|reports|docs|apidocs|flasgger_static)/ {
            proxy_pass http://backend_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Adiciona cabeçalhos de segurança para mitigar ataques de clickjacking.
        # SAMEORIGIN permite que a página seja exibida em iframes, mas apenas se
        # a página pai for do mesmo domínio. Isso é exatamente o que precisamos.
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
    }
}