# --- Namespace para organizar os recursos da aplicação ---
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: meu-dash-alertas

---
# --- Headless Service: Necessário para o StatefulSet ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: meu-dash-headless
#   namespace: meu-dash-alertas
# spec:
#   clusterIP: None
#   selector:
#     app: meu-dash-web
#   ports:
#   - port: 80
#     targetPort: 5000

---
# --- Service ClusterIP: Ponto de acesso interno para o Ingress ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: meu-dash-web
#   namespace: meu-dash-alertas
# spec:
#   type: ClusterIP
#   selector:
#     app: meu-dash-web
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000

---
# --- PodDisruptionBudget (PDB): Garante a alta disponibilidade ---
# apiVersion: policy/v1
# kind: PodDisruptionBudget
# metadata:
#   name: meu-dash-pdb
#   namespace: meu-dash-alertas
# spec:
#   minAvailable: 1
#   selector:
#     matchLabels:
#       app: meu-dash-web

---
# --- StatefulSet: Orquestração dos Pods da aplicação ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: meu-dash-web
  namespace: meu-dash-alertas
spec:
  serviceName: "meu-dash-headless"
  replicas: 1
  selector:
    matchLabels:
      app: meu-dash-web
  template:
    metadata:
      labels:
        app: meu-dash-web
    spec:
      # ADICIONADO: Declaração de um volume temporário (emptyDir).
      volumes:
      - name: temp-storage
        emptyDir: {}
      securityContext:
        # O Nginx precisa rodar como root para iniciar, mas os processos filhos rodam como www-data.
        # O Gunicorn rodará como um usuário não-privilegiado.
        runAsUser: 1001 # Usuário padrão para os contêineres
        fsGroup: 1001 # Garante que o pod possa escrever nos volumes
      containers:
      # Contêiner do Nginx: serve o frontend e faz proxy para o backend
      - name: nginx
        image: sevenleo/meu-dash-web:latest 
        ports:
        - name: http
          containerPort: 80
        # O Nginx não precisa de variáveis de ambiente, mas precisa da configuração
        # que está na imagem e dos arquivos estáticos.
        volumeMounts:
        - name: meu-dash-data
          mountPath: /app/data # Monta os dados para que relatórios possam ser acessados se necessário
        # As sondas de saúde agora apontam para o Nginx, que é a porta de entrada do Pod.
        readinessProbe:
          httpGet:
            path: / # Uma requisição para a raiz do frontend é suficiente
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 15
          periodSeconds: 20

      # Contêiner da API (Gunicorn/Flask): roda a lógica de negócio
      - name: meu-dash-api
        image: sevenleo/meu-dash-web:latest 
        # Este contêiner não expõe portas para fora do Pod.
        # Ele é acessado pelo Nginx via localhost.
        command: ["gunicorn", "--workers", "4", "--bind", "127.0.0.1:5000", "src.app:app", "--chdir", "/app"]
        env:
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: admin-credentials
              key: ADMIN_USER
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: admin-credentials
              key: ADMIN_PASSWORD
        # A sonda de saúde para a API verifica o endpoint /health diretamente no Gunicorn
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
          requests:
            cpu: "256m"
            memory: "512Mi"
          limits:
            cpu: "256m"
            memory: "512Mi"
        volumeMounts:
        - name: meu-dash-data
          mountPath: /app/data
  volumeClaimTemplates:
  - metadata:
      name: meu-dash-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 1Gi
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: meu-dash-web-ingress
#   namespace: meu-dash-alertas
# spec:
#   ingressClassName: nginx
#   tls:
#   - hosts:
#     - meu-dash-web-teste.devops-master.shop
#     secretName: meu-dash-tls-secret
#   rules:
#   - host: meu-dash-web-teste.devops-master.shop
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: meu-dash-web
#             port:
#               number: 80
