# --- Namespace para organizar os recursos da aplicação ---
apiVersion: v1
kind: Namespace
metadata:
  name: smart-plan

---
# --- ServiceAccount: Define uma identidade dedicada e com privilégios mínimos para a aplicação ---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: smart-plan-sa
  namespace: smart-plan
automountServiceAccountToken: false

---
# --- Headless Service: Necessário para o StatefulSet ---
apiVersion: v1
kind: Service
metadata:
  name: smart-plan-headless
  namespace: smart-plan
spec:
  clusterIP: None
  selector:
    app: smart-plan
  ports:
  - port: 80
    targetPort: http

---
# --- Service ClusterIP: Ponto de acesso interno para o Ingress ---
apiVersion: v1
kind: Service
metadata:
  name: smart-plan
  namespace: smart-plan
spec:
  type: ClusterIP
  selector:
    app: smart-plan
  ports:
  - name: http
    port: 80
    targetPort: http

---
# --- PodDisruptionBudget (PDB): Garante a alta disponibilidade ---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: smart-plan-pdb
  namespace: smart-plan
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: smart-plan

---
# --- StatefulSet: Orquestração dos Pods da aplicação ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: smart-plan
  namespace: smart-plan
spec:
  serviceName: "smart-plan-headless"
  replicas: 1
  selector:
    matchLabels:
      app: smart-plan
  template:
    metadata:
      labels:
        app: smart-plan
    spec:
      serviceAccountName: smart-plan-sa
      automountServiceAccountToken: false

      containers:
      # Contêiner do Nginx: serve o frontend e faz proxy para o backend
      - name: smart-plan-nginx
        image: sevenleo/smart-plan:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
        command: ["nginx", "-g", "daemon off;"]
        volumeMounts:
        - name: smart-plan-data
          mountPath: /app/data
        resources:
          requests:
            cpu: "128m"
            memory: "128Mi"
          limits:
            cpu: "256m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /
            port: http
        livenessProbe:
          httpGet:
            path: /
            port: http

      # Contêiner da API (Gunicorn/Flask): roda a lógica de negócio
      - name: smart-plan-api
        image: sevenleo/smart-plan:latest
        imagePullPolicy: Always
        # CORREÇÃO: Aponta para o novo ponto de entrada 'backend.wsgi:app'
        command: ["gunicorn", "--workers", "4", "--bind", "0.0.0.0:5000", "--log-level", "debug", "--access-logfile", "-", "--error-logfile", "-", "backend.wsgi:app", "--chdir", "/app"]
        envFrom:
        - secretRef:
            name: admin-credentials
        env:
        - name: FRONTEND_BASE_URL
          value: "https://smart-plan.devops-master.shop"
        - name: JWT_EXPIRATION_HOURS
          value: "1"
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
          requests:
            cpu: "256m"
            memory: "512Mi"
          limits:
            cpu: "512m"
            memory: "1Gi"
        volumeMounts:
        - name: smart-plan-data
          mountPath: /app/data
  volumeClaimTemplates:
  - metadata:
      name: smart-plan-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 1Gi

---
# --- Ingress: Expõe o serviço para o mundo externo ---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: smart-plan-ingress
  namespace: smart-plan
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - smart-plan.devops-master.shop
    secretName: smart-plan-tls-secret
  rules:
  - host: smart-plan.devops-master.shop
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smart-plan
            port:
              number: 80